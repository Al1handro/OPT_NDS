import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart, or_f, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

BOT = Bot(token="")
dp = Dispatcher()

start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚öñÔ∏è OPT NDS"),
            KeyboardButton(text="üí∞ OPT Money")
        ],
        [
            KeyboardButton(text="–û–¢–ú–ï–ù–ê")
        ]
    ],
    resize_keyboard=True,
    input_field_placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
)

ALLOWED_UPDATES = [
    'update.message',  # –°–æ–æ–±—â–µ–Ω–∏—è
    'update.callback_query',  # –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    'update.channel_post',  # –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö
    'update.inline_query',  # –ò–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å—ã
    'update.pre_checkout_query'  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
]


class NDS(StatesGroup):
    one = State()
    two = State()
    three = State()


class OPT(StatesGroup):
    one = State()
    two = State()
    three = State()
    four = State()
    five = State()


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?', reply_markup=start_kb)


@dp.message(F.data == 'skip')
async def cancel(message: types.Message, bot: Bot, state: FSMContext):
    await state.clear()
    await bot.send_message(chat_id=message.from_user.id, text='–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?')


@dp.message(StateFilter(None), F.text == "‚öñÔ∏è OPT NDS")
async def opt_nds(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(NDS.one)
    await state.update_data(name=call.from_user.username)
    k = [
        [InlineKeyboardButton(text="–ù—ã–Ω–µ—à–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª 2024", callback_data='quarter1' + '*–ù—ã–Ω–µ—à–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª 2024')],
        [InlineKeyboardButton(text="–ü—Ä–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data='quarter2' + '*–ü—Ä–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã')]
    ]
    keyboard_message = InlineKeyboardMarkup(inline_keyboard=k)
    await bot.send_message(chat_id=call.from_user.id,
                           text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. '
                                '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è?',
                           reply_markup=keyboard_message)


@dp.callback_query(NDS.one)
async def opt_nds_1(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(NDS.two)
    await state.update_data(info=call.data.split('*')[1])
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id,
                           text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. '
                                '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è?')
    k = [
        [InlineKeyboardButton(text='–æ—Ç 0 –¥–æ 10 –º–ª–Ω', callback_data='from_0_to_10_' + '*–æ—Ç 0 –¥–æ 10 –º–ª–Ω')],
        [InlineKeyboardButton(text='–æ—Ç 10 –¥–æ 50 –º–ª–Ω', callback_data='from_10_to_50_' + '*–æ—Ç 10 –¥–æ 50 –º–ª–Ω')],
        [InlineKeyboardButton(text='–æ—Ç 50 –¥–æ 100 –º–ª–Ω', callback_data='from_50_to_100_' + '*–æ—Ç 50 –¥–æ 100 –º–ª–Ω')],
        [InlineKeyboardButton(text='–±–æ–ª–µ–µ 100 –º–ª–Ω', callback_data='than_100' + '*–±–æ–ª–µ–µ 100 –º–ª–Ω')]
    ]
    keyboard_message = InlineKeyboardMarkup(inline_keyboard=k)
    await bot.send_message(chat_id=call.from_user.id,
                     text=f'–ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–±—ä–µ–º –∑–∞–∫—É–ø–æ–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏?',
                     reply_markup=keyboard_message)


@dp.callback_query(NDS.two)
async def opt_nds_2(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(NDS.two)
    await state.update_data(volume=call.data.split('*')[1])
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id,
                           text=f'–ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–±—ä–µ–º –∑–∞–∫—É–ø–æ–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏?')
    data = await state.get_data()
    print(data)
    await bot.send_message(chat_id=call.from_user.id,
                           text=f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n'
                                f'–ü–µ—Ä–∏–æ–¥: {data["info"]}\n'
                                f'–°—É–º–º–∞: {data["volume"]}')
    await bot.send_message(chat_id=call.from_user.id,
                           text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.')
    await bot.send_message(chat_id=-1002217334405,
                           text=(f'‚öñÔ∏è OPT NDS\n'
                                f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n'
                                f'–ü–µ—Ä–∏–æ–¥: {data["info"]}\n'
                                f'–°—É–º–º–∞: {data["volume"]}\n'
                                f'–ö–ª–∏–µ–Ω—Ç: @{call.from_user.username}'))
    await state.clear()


@dp.message(StateFilter(None), F.text == "üí∞ OPT Money")
async def opt_money(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(OPT.one)
    await state.update_data(name=call.from_user.username)
    k = [
        [InlineKeyboardButton(text="–Ω–∞ –∫–∞—Ä—Ç—É", callback_data='sent' + '*–Ω–∞ –∫–∞—Ä—Ç—É')],
        [InlineKeyboardButton(text="–∫—Ä–∏–ø—Ç–æ–π", callback_data='sent' + '*–∫—Ä–∏–ø—Ç–æ–π')],
        [InlineKeyboardButton(text="–Ω–∞–ª–∏—á–∫–æ–π", callback_data='sent' + '*–Ω–∞–ª–∏—á–∫–æ–π')]
    ]
    keyboard_message = InlineKeyboardMarkup(inline_keyboard=k)
    await bot.send_message(chat_id=call.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! '
                                                           '–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. '
                                                           '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?',
                           reply_markup=keyboard_message)


@dp.callback_query(OPT.one)
async def opt_money_1(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(OPT.two)
    await state.update_data(view=call.data.split('*')[1])
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! '
                                                           '–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. '
                                                           '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?')
    await bot.send_message(chat_id=call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù')


@dp.message(OPT.two)
async def opt_money_2(message: types.Message, bot: Bot, state: FSMContext):
    try:
        user_input = message.text
        if user_input == '–û–¢–ú–ï–ù–ê':
            await state.clear()
            await bot.send_message(chat_id=message.from_user.id, text='–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?')
        number = int(user_input)
        if 10 <= len(user_input) <= 12:
            k = [
                [InlineKeyboardButton(text='–æ—Ç 0 –¥–æ 10 –º–ª–Ω', callback_data='from_0_to_10_' + '*–æ—Ç 0 –¥–æ 10 –º–ª–Ω')],
                [InlineKeyboardButton(text='–æ—Ç 10 –¥–æ 50 –º–ª–Ω', callback_data='from_10_to_50_' + '*–æ—Ç 10 –¥–æ 50 –º–ª–Ω')],
                [InlineKeyboardButton(text='–æ—Ç 50 –¥–æ 100 –º–ª–Ω', callback_data='from_50_to_100_' + '*–æ—Ç 50 –¥–æ 100 –º–ª–Ω')],
                [InlineKeyboardButton(text='–±–æ–ª–µ–µ 100 –º–ª–Ω', callback_data='than_100' + '*–±–æ–ª–µ–µ 100 –º–ª–Ω')]
            ]
            keyboard_message = InlineKeyboardMarkup(inline_keyboard=k)
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'–ö–∞–∫–æ–π –æ–±—ä–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?',
                                   reply_markup=keyboard_message)
            await state.update_data(inn=message.text)
            await state.set_state(OPT.three)
        else:
            if message.text == '–û–¢–ú–ï–ù–ê':
                pass
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ò–ù–ù")
    except ValueError:
        if message.text == '–û–¢–ú–ï–ù–ê':
            pass
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ò–ù–ù")


@dp.callback_query(OPT.three)
async def opt_money_3(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(sum=call.data.split('*')[1])
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id,
                           text=f'–ö–∞–∫–æ–π –æ–±—ä–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?')
    await bot.send_message(chat_id=call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞')
    await state.set_state(OPT.four)


@dp.message(OPT.four)
async def opt_money_4(message: types.Message, bot:Bot, state: FSMContext):
    if message.text == '–û–¢–ú–ï–ù–ê':
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text='–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?')
    else:
        await state.update_data(desired=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É (–∑–∞–∫—Ä—ã–≤–∞—à–∫–∏)')
        await state.set_state(OPT.five)


@dp.message(OPT.five)
async def opt_money_4(message: types.Message, bot: Bot, state: FSMContext):
    if message.text == '–û–¢–ú–ï–ù–ê':
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text='–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?')
    else:
        await state.update_data(target=message.text)
        data = await state.get_data()
        print(data)
        await message.answer(text=f'–í–≤–µ–¥–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–ù–ù: {data["inn"]}\n–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å: {data["view"]}\n'
                                  f'–°—É–º–º–∞: {data["sum"]}\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data["desired"]}\n'
                                  f'–ñ–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —Éc–ª—É–≥–∞: {data["target"]}')
        await bot.send_message(chat_id=message.from_user.id,
                               text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.')
        await bot.send_message(chat_id=-1002217334405, text=f'üí∞ OPT Money\n–í–≤–µ–¥–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–ù–ù: {data["inn"]}\n'
                                                            f'–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å: {data["view"]}\n–°—É–º–º–∞: {data["sum"]}\n'
                                                            f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data["desired"]}\n'
                                                            f'–ñ–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —Éc–ª—É–≥–∞: {data["target"]}\n'
                                                            f'–ö–ª–∏–µ–Ω—Ç: @{message.from_user.username}')
    await state.clear()


@dp.message(F.text)
async def cancel_command(message: types.Message, bot: Bot, state: FSMContext):
    if message.text == '–û–¢–ú–ï–ù–ê':
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text='–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?')
    else:
        await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?")


async def main():
    await dp.start_polling(BOT, allowed_updates=ALLOWED_UPDATES)


if __name__ == '__main__':
    asyncio.run(main())
